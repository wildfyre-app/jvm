/*
 * Copyright 2019 Wildfyre.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'findbugs'
    id 'signing' // To GPG-sign the archives that will be published.
    id 'maven' // To export to Maven
    id 'io.codearte.nexus-staging' version '0.11.0' // Confirm publication to MavenCentral
    id 'org.jetbrains.kotlin.jvm' version '1.2.70'
    id 'org.jetbrains.dokka' version '0.9.17'
}

group 'net.wildfyre'
getVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

void getVersion(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--candidates=30', '--dirty=-SNAPSHOT'
        standardOutput = stdout
    }
    version stdout
        .toString()[1..-2]                      // Remove the \n character at the end of the command and the 'v'
        .replaceFirst("-\\d+-", "-")            // Remove the number of commits
    if ( !project.hasProperty('skipGetVersion') )
        println "Detected project version: " + version
}

repositories {
    mavenCentral()
}

configurations {
    fatJar
}

jar {
    doFirst {
        from { configurations.fatJar.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    fatJar group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

javadoc {
    options {
        addStringOption('source', '8')
        addStringOption('link', "https://docs.oracle.com/javase/8/docs/api/")
        //addBooleanOption('html5', true) Only in Java 9+, breaks in Java 8
    }
}

test {
    // Using less cores than available, because JUnit needs some to work
    maxParallelForks = Runtime.runtime.availableProcessors() - 2
    if(maxParallelForks <= 0)
        maxParallelForks = 1
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugsMain {
    classpath += files Jvm.current().getJavaHome()
}

findbugsTest {
    classpath += files Jvm.current().getJavaHome()
}

// Removes the directories out/ (created by IntelliJ) and wildfyre.net/ (created by the maven plugin) when calling
// 'gradle clean'.
clean {
    delete "${rootDir}/out"
    delete "${rootDir}/wildfyre.net"
    delete "${rootDir}/http/out"
    delete "${rootDir}/cache/out"
}

task testAPI(type: Exec) {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        // Checking if the API is running but not launching it,
        // because it needs to run in another terminal so the log is visible.
        commandLine './api.sh', '--norun'
    } else {
        // The following two lines are included here because they are in the script
        // but NEED to be executed for platforms that don't support the script too.
        // They cannot be here for all platforms because this task never executes the script.
        commandLine 'git', 'submodule', 'init'
        commandLine 'git', 'submodule', 'update'
        println("Cannot automatically check if the API is running.")
    }
}
test.dependsOn(testAPI) // The API is needed for testing purposes only

// Javadoc task as seen at https://central.sonatype.org/pages/gradle.html
// Needed for publishing
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// Sources task as seen at https://central.sonatype.org/pages/gradle.html
// Needed for publishing
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Artifacts as seen at https://central.sonatype.org/pages/gradle.html
// Needed for publishing
artifacts {
    archives javadocJar, sourcesJar
}

// Configuration for the Signing plugin to GPG-sign the archives (required by Sonatype to accept the new release).
signing {
    sign configurations.archives
}

task publish(dependsOn: uploadArchives){
    // Placeholder task that is preceded by uploadArchives and followed by closeAndReleaseRepository,
    // which are the two needed steps to fully release a new version.
    // This allows to do "./gradlew publish".
}
publish.finalizedBy closeAndReleaseRepository

if (!hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
}
if (!hasProperty('nexusPassword')) {
    ext.nexusPassword = ''
}

// Adapted from https://central.sonatype.org/pages/gradle.html
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name 'WildFyre Client API'
                packaging 'jar'
                description "The WildFyre client API lets you connect to the servers from a Java or Android app."
                url 'https://wildfyre.net'

                scm {
                    connection 'https://phabricator.wildfyre.net/source/libwf-java.git'
                    developerConnection 'https://phabricator.wildfyre.net/source/libwf-java.git'
                    url 'https://phabricator.wildfyre.net/source/libwf-java/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'clovis-ai'
                        name 'Ivan Canet'
                        email 'ivan.canet@gmail.com'
                    }
                }
            }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
dokka {
    outputFormat = 'javadoc'
    outputDirectory = 'build/docs/dokka'
    jdkVersion = 8
    includeNonPublic = false
    reportUndocumented = true

    linkMapping {
        dir = "src/"
        url = "https://phabricator.wildfyre.net/source/libwf-java/browse/master/src/"
        suffix = "\$"
    }
}

task machineReadableTestStatus {
    doLast {
        def ret = 0
        if ( check.state.failure == null ) {
            ret = ret | 0b01
        }
        if ( test.state.failure == null ) {
            ret = ret | 0b10
        }
        println ret
    }
}
